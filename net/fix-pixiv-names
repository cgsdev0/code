#!/usr/bin/env python3
import argparse
import bs4
from functools import lru_cache
from nullroute.core import Core, Env
from nullroute.misc import filter_filename, set_file_attrs
from nullroute.api.pixiv import PixivClient, PixivApiClient, PixivApiError
from nullroute.renameutil import RenameJob
import os
from pprint import pprint
import re
from requests.exceptions import HTTPError

# TODO: https://danbooru.donmai.us/wiki_pages/58938
# TODO: https://github.com/r888888888/danbooru/issues/2383

class PixivRenamer():
    def __init__(self):
        self.pixiv = PixivClient()
        self.api = PixivApiClient()
        self.api._authenticate()
        self.web = None

    def init_web_client(self):
        if not self.web:
            from nullroute.api.pixiv_web import PixivWebClient
            self.web = PixivWebClient()
            self.web._authenticate()

    ## fallback HTML scrape functions

    @lru_cache(maxsize=1024)
    def scrape_member_name_by_member_id(self, member_id):
        url = self.pixiv.fmt_member_url(member_id)
        Core.info("fetching %s" % url)
        resp = self.ua.get(url)
        resp.raise_for_status()
        body = bs4.BeautifulSoup(resp.content, "lxml")
        name = body.find("h1", {"class": "name"})
        if name:
            return name.get_text()
        raise ValueError("could not find member name tag")

    def scrape_member_id_by_illust_id(self, illust_id):
        url = self.pixiv.fmt_illust_url(illust_id)
        Core.info("fetching %s" % url)
        resp = self.ua.get(url)
        resp.raise_for_status()
        m = re.search(r'"/?member\.php\?id=(\d+)"',
                      resp.content.decode("utf-8"))
        if m:
            return int(m.group(1))
        raise ValueError("could not find member ID tag")

    ## public interface functions

    @lru_cache(maxsize=1024)
    def get_prefix_by_member_id(self, member_id):
        resp = self.api.get_member_info(member_id)
        prefix = self.pixiv.fmt_member_tag(resp["id"], resp["name"])
        return filter_filename(prefix)

    @lru_cache(maxsize=1024)
    def get_prefix_by_illust_id(self, illust_id):
        try:
            resp = self.api.get_illust_info(illust_id)
            prefix = self.pixiv.fmt_member_tag(resp["user"]["id"], resp["user"]["name"])
            return filter_filename(prefix)
        except (ValueError, PixivApiError) as e:
            Core.err(str(e))
            member_id = self.scrape_member_id_by_illust_id(illust_id)
            member_name = self.scrape_member_name_by_member_id(member_id)
            prefix = self.pixiv.fmt_member_tag(member_id, member_name)
            return filter_filename(prefix)

def rename_file_in_dir(dirpath, filename):
    global args
    global bare_re
    global prefix_re
    global suffix_re
    global pixiv_api

    old_path = os.path.join(dirpath, filename)
    job = RenameJob(old_path, args.dry_run)

    if re.search(r'_pixiv\d+', filename):
        Core.debug("skip %r: found '_pixiv' in name", filename)
        return

    m = bare_re.match(filename)
    if m:
        Core.debug("process %r: matched bare regex, groups %r", filename, m.groups())
        job.begin()
        illust_id = int(m.group(1))
        try:
            prefix = pixiv_api.get_prefix_by_illust_id(illust_id)
        except HTTPError as e:
            job.end_fail(e)
            return
        filename = prefix + " " + filename
        job.end_rename(filename)
        return

    m = prefix_re.match(filename)
    if m:
        Core.debug("process %r: matched prefix regex, groups %r", filename, m.groups())
        job.begin()
        member_id = int(m.group(1))
        try:
            prefix = pixiv_api.get_prefix_by_member_id(member_id)
        except HTTPError as e:
            job.end_fail(e)
            return
        filename = prefix + " " + m.group(2)
        job.end_rename(filename)
        return

    m = suffix_re.match(filename)
    if m:
        Core.debug("process %r: matched suffix regex, groups %r", filename, m.groups())
        job.begin()
        illust_id = int(m.group(2))
        try:
            prefix = pixiv_api.get_prefix_by_illust_id(illust_id)
        except HTTPError as e:
            job.end_fail(e)
            return
        filename = m.group(1) + " " + prefix + " " + m.group(2) + m.group(3)
        job.end_rename(filename)
        return

    Core.trace("skip %r: not matched", filename)

def fixup_metadata(path):
    global bare_re
    global prefix_re
    global pixiv_api

    filename = os.path.basename(path)
    m = bare_re.match(filename)
    if m:
        illust_id = int(m.group(1))
    else:
        m = prefix_re.match(filename)
        print(m)
        if m:
            illust_id = int(m.group(2))
        else:
            return

    work = pixiv_api.get_illust_info(illust_id)
    attrs = {
        "dublincore.title": work.title,
        "dublincore.creator": "%s_pixiv%s" % (work.user.name, work.user.id),
    }
    set_file_attrs(filename, attrs)

parser = argparse.ArgumentParser()
parser.add_argument("path", nargs=argparse.ZERO_OR_MORE)
parser.add_argument("-n", "--dry-run", action="store_true", help="Do nothing.")
args = parser.parse_args()

bare_re = re.compile(r'^(\d+)(?:_big)?(?:_p\d+|_delays|_ugoira\d+x\d+)(?: \(\d+\))?\.\w+$')
prefix_re = re.compile(r'^pixiv(\d+) (.+)$')
suffix_re = re.compile(r'(.+) (\d+)((?:_p\d+|_delays|_ugoira\d+x\d+)(?: \(\d+\))?\.\w+)$')
pixiv_api = PixivRenamer()

allowed_exts = (
    ".webm",
    #".txt",
    #".zip",
    ".jpg",
    ".jpeg",
    ".png",
    ".gif",
)

for arg in args.path or ["."]:
    if not os.path.exists(arg):
        Core.err("path %r does not exist" % arg)
    if os.path.isdir(arg):
        for dirpath, dirnames, filenames in os.walk(arg):
            for filename in filenames:
                if not filename.endswith(allowed_exts):
                    continue
                rename_file_in_dir(dirpath, filename)
    else:
        dirpath, filename = os.path.split(arg)
        fixup_metadata(arg)
        rename_file_in_dir(dirpath, filename)

Core.exit()
